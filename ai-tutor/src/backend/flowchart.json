{
  "Week 1": [
    { 
      "topic": "Basic Java Syntax", 
      "external": [], 
      "internal": [] 
    },
    { 
      "topic": "Java Primitive Types", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Java Objects", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Classes", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Inheritance", 
      "external": [], 
      "internal": [] }
  ],
  "Week 2": [
    { 
      "topic": "Interfaces", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "File I/O", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Overriding/Shadowing", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Object Oriented Design Principles", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "SOLID", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "super", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "final", 
      "external": [], 
      "internal": [] }
  ],
  "Week 3": [
    { 
      "topic": "Parametric Polymorphism", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Exceptions", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "User Stories", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Git", 
      "external": [], 
      "internal": [] }
  ],
  "Week 4": [
    { 
      "topic": "Software Engineering Processes", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Waterfall", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "Agile", 
      "external": [
        "https://www.geeksforgeeks.org/software-engineering-agile-software-development/",
        "https://www.geeksforgeeks.org/what-is-agile-methodology/",
        "https://www.geeksforgeeks.org/agile-software-process-and-its-principles/",
        "https://www.pmi.org/disciplined-agile/agile/theagilemanifesto",
        "https://learn.microsoft.com/en-us/devops/plan/what-is-agile",
        "https://www.coursera.org/articles/what-is-agile-a-beginners-guide",
        "https://www.geeksforgeeks.org/test-driven-development-tdd/",
        "https://www.agilealliance.org/glossary/tdd/",
        "https://developer.ibm.com/articles/5-steps-of-test-driven-development/"
      ], 
      "internal": [
        {
          "path": "path/to/file",
          "page": 3
        }, 
        {
          "path": "path/to/file",
          "page": 5
        }
      ] },
    { 
      "topic": "Scrum", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "CRC", 
      "external": [], 
      "internal": [] },
    { 
      "topic": "UML Diagrams", 
      "external": [], 
      "internal": [] }
  ],
  "Week 5/6/7": [
    { 
      "topic": "Design Patterns", 
      "external": [
        "https://refactoring.guru/design-patterns/what-is-pattern",
        "https://refactoring.guru/design-patterns/classification",
        "https://refactoring.guru/design-patterns/catalog",
        "https://refactoring.guru/design-patterns/factory-method",
        "https://refactoring.guru/design-patterns/abstract-factory",
        "https://refactoring.guru/design-patterns/builder",
        "https://refactoring.guru/design-patterns/prototype",
        "https://refactoring.guru/design-patterns/singleton",
        "https://refactoring.guru/design-patterns/adapter",
        "https://refactoring.guru/design-patterns/bridge",
        "https://refactoring.guru/design-patterns/composite",
        "https://refactoring.guru/design-patterns/decorator",
        "https://refactoring.guru/design-patterns/facade",
        "https://refactoring.guru/design-patterns/flyweight",
        "https://refactoring.guru/design-patterns/proxy",
        "https://refactoring.guru/design-patterns/chain-of-responsibility",
        "https://refactoring.guru/design-patterns/command",
        "https://refactoring.guru/design-patterns/iterator",
        "https://refactoring.guru/design-patterns/mediator",
        "https://refactoring.guru/design-patterns/memento",
        "https://refactoring.guru/design-patterns/observer",
        "https://refactoring.guru/design-patterns/state",
        "https://refactoring.guru/design-patterns/strategy",
        "https://refactoring.guru/design-patterns/template-method",
        "https://refactoring.guru/design-patterns/visitor",
        "https://www.geeksforgeeks.org/mvc-design-pattern/",
        "https://www.geeksforgeeks.org/mvc-architecture-system-design/",
        "https://www.geeksforgeeks.org/mvc-framework-introduction/",
        "https://www.youtube.com/watch?v=tv-_1er1mWI",
        "https://www.youtube.com/watch?v=tAuRQs_d9F8",
        "https://www.youtube.com/watch?v=DUg2SWWK18I",
        "https://java-design-patterns.com/patterns/producer-consumer/",
        "https://www.baeldung.com/java-producer-consumer-problem",
        "https://medium.com/@nirajranasinghe/design-patterns-for-concurrent-programming-producer-consumer-pattern-39193cac195a"
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week7-video-slides.pdf",
          "page": "1-47"
        },
        {
          "path": "resources/video_slides/week9-video-slides.pdf",
          "page": "22-24"
        },
        {
          "path": "resources/video_slides/week8-video-slides.pdf",
          "page": "1-15"
        },
        {
          "path": "resources/video_slides/week5-video-slides.pdf",
          "page": "1-34"
        }
      ] },
    { 
      "topic": "Observer", 
      "external": [
        "https://refactoring.guru/design-patterns/chain-of-responsibility#:~:text=Observer%20lets%20receivers%20dynamically%20subscribe%20to%20and%20unsubscribe%20from%20receiving%20requests.",
        "https://refactoring.guru/design-patterns/command#:~:text=Chain%20of%20Responsibility,from%20receiving%20requests.",
        "https://refactoring.guru/design-patterns/mediator#:~:text=The%20difference%20between,set%20of%20observers.",
        "https://refactoring.guru/design-patterns/observer",
        "https://youtu.be/tv-_1er1mWI?t=467",
        "https://youtu.be/tAuRQs_d9F8?t=218",
        "https://java-design-patterns.com/patterns/producer-consumer/#:~:text=Observer%3A%20While%20both%20deal%20with%20notifying%20or%20handling%20events%2C%20the%20Observer%20pattern%20is%20more%20about%20event%20subscription%20and%20notification%2C%20whereas%20Producer%2DConsumer%20focuses%20on%20decoupled%20data%20production%20and%20consumption."
      ], 
      "internal": [
        {
          "path": "/resources/lecture_slides/week6-lecture-slides.pdf",
          "page": "5-6"
        },
        {
          "path": "resources/video_slides/week8-video-slides.pdf",
          "page": "2-3,11-15"
        },
        {
          "path": "resources/video_slides/week5-video-slides.pdf",
          "page": "11-16"
        }
      ] },
    { 
      "topic": "Iterator", 
      "external": [
        "https://refactoring.guru/design-patterns/factory-method#:~:text=You%20can%20use%20Factory%20Method%20along%20with%20Iterator%20to%20let%20collection%20subclasses%20return%20different%20types%20of%20iterators%20that%20are%20compatible%20with%20the%20collections.",
        "https://refactoring.guru/design-patterns/composite#:~:text=You%20can%20use%20Iterators%20to%20traverse%20Composite%20trees.",
        "https://refactoring.guru/design-patterns/iterator",
        "https://refactoring.guru/design-patterns/memento#:~:text=You%20can%20use%20Memento%20along%20with%20Iterator%20to%20capture%20the%20current%20iteration%20state%20and%20roll%20it%20back%20if%20necessary.",
        "https://refactoring.guru/design-patterns/visitor#:~:text=You%20can%20use%20Visitor%20along%20with%20Iterator%20to%20traverse%20a%20complex%20data%20structure%20and%20execute%20some%20operation%20over%20its%20elements%2C%20even%20if%20they%20all%20have%20different%20classes.",
        "https://youtu.be/tv-_1er1mWI?t=405",
        "https://youtu.be/tAuRQs_d9F8?t=312"
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week7-video-slides.pdf",
          "page": "2"
        },
        {
          "path": "resources/video_slides/week5-video-slides.pdf",
          "page": "9-10"
        }
      ] },
    { 
      "topic": "Strategy", 
      "external": [
        "https://refactoring.guru/design-patterns/bridge#:~:text=Bridge%2C%20State,the%20pattern%20solves.",
        "https://refactoring.guru/design-patterns/decorator#:~:text=Decorator%20lets%20you%20change%20the%20skin%20of%20an%20object%2C%20while%20Strategy%20lets%20you%20change%20the%20guts.",
        "https://refactoring.guru/design-patterns/command#:~:text=Command%20and%20Strategy,single%20context%20class.",
        "https://refactoring.guru/design-patterns/state#:~:text=Bridge%2C%20State,context%20at%20will.",
        "https://refactoring.guru/design-patterns/strategy",
        "https://refactoring.guru/design-patterns/template-method#:~:text=Template%20Method%20is%20based,switch%20behaviors%20at%20runtime.",
        "https://youtu.be/tAuRQs_d9F8?t=388"
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week8-video-slides.pdf",
          "page": "15"
        },
        {
          "path": "resources/video_slides/week5-video-slides.pdf",
          "page": "18-26"
        }
      ] },
    { 
      "topic": "Command", 
      "external": [
        "https://refactoring.guru/design-patterns/prototype#:~:text=Prototype%20can%20help%20when%20you%20need%20to%20save%20copies%20of%20Commands%20into%20history.",
        "https://refactoring.guru/design-patterns/chain-of-responsibility#:~:text=Handlers%20in%20Chain%20of%20Responsibility%20can%20be%20implemented%20as%20Commands.%20In%20this%20case%2C%20you%20can%20execute%20a%20lot%20of%20different%20operations%20over%20the%20same%20context%20object%2C%20represented%20by%20a%20request.",
        "https://refactoring.guru/design-patterns/command",
        "https://refactoring.guru/design-patterns/mediator#:~:text=Chain%20of%20Responsibility,from%20receiving%20requests.",
        "https://refactoring.guru/design-patterns/memento#:~:text=You%20can%20use%20Command%20and%20Memento%20together%20when%20implementing%20%E2%80%9Cundo%E2%80%9D.%20In%20this%20case%2C%20commands%20are%20responsible%20for%20performing%20various%20operations%20over%20a%20target%20object%2C%20while%20mementos%20save%20the%20state%20of%20that%20object%20just%20before%20a%20command%20gets%20executed.",
        "https://refactoring.guru/design-patterns/observer#:~:text=Chain%20of%20Responsibility,from%20receiving%20requests.",
        "https://refactoring.guru/design-patterns/strategy#:~:text=Command%20and%20Strategy,single%20context%20class.",
        "https://refactoring.guru/design-patterns/visitor#:~:text=You%20can%20treat%20Visitor%20as%20a%20powerful%20version%20of%20the%20Command%20pattern.%20Its%20objects%20can%20execute%20operations%20over%20various%20objects%20of%20different%20classes."
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week5-video-slides.pdf",
          "page": "27-34"
        }
      ] },
    { 
      "topic": "Accessibility", 
      "external": [
        "https://developer.mozilla.org/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG",
        "https://developer.mozilla.org/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG/Perceivable",
        "https://developer.mozilla.org/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG/Operable",
        "https://developer.mozilla.org/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG/Understandable",
        "https://developer.mozilla.org/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG/Robust",
        "https://www.w3.org/WAI/standards-guidelines/wcag/",
        "https://www.w3.org/WAI/WCAG22/Understanding/intro#understanding-the-four-principles-of-accessibility"
      ], 
      "internal": [
        {
          "path": "/resources/lecture_slides/week6-lecture-slides.pdf",
          "page": "7-15"
        }, 
        {
          "path": "resources/video_slides/accessibility.pdf",
          "page": "3-34"
        }
      ] }
  ],
  "Week 11": [
    { 
      "topic": "Floating Point Numbers", 
      "external": [
        "https://www.geeksforgeeks.org/floating-point-representation-basics/#:~:text=What%20is%20Floating%20Point%20Representation%3F",
        "https://www.geeksforgeeks.org/ieee-standard-754-floating-point-numbers/",
        "https://www.cs.cornell.edu/~tomf/notes/cps104/floating.html",
        "https://introcs.cs.princeton.edu/java/91float/",
        "https://eng.libretexts.org/Bookshelves/Computer_Science/Programming_and_Computation_Fundamentals/High_Performance_Computing_(Severance)/02%3A_Modern_Computer_Architectures/2.02%3A_Floating-Point_Numbers#:~:text=of%20calculation.3-,Mantissa/Exponent,-The%20floating%2Dpoint",
        "https://www.youtube.com/watch?v=8afbTaA-gOQ",
        "https://www.geeksforgeeks.org/data-types-in-java/#:~:text=6.%20float%20Data,errors%20in%20java.",
        "https://www.tpointtech.com/type-casting-in-java#:~:text=From%20byte%20to,also%20be%20used."
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week11-video-slides.pdf",
          "page": "1-52"
        }
      ] },
    { 
      "topic": "IEEE 754 Format", 
      "external": [
        "https://www.geeksforgeeks.org/floating-point-representation-basics/",
        "https://www.geeksforgeeks.org/ieee-standard-754-floating-point-numbers/",
        "https://www.cs.cornell.edu/~tomf/notes/cps104/floating.html",
        "https://introcs.cs.princeton.edu/java/91float/#:~:text=IEEE%20754%20binary%20floating%20point%20representation.",
        "https://eng.libretexts.org/Bookshelves/Computer_Science/Programming_and_Computation_Fundamentals/High_Performance_Computing_(Severance)/02%3A_Modern_Computer_Architectures/2.02%3A_Floating-Point_Numbers#:~:text=the%20same%20order.-,IEEE%20Storage%20Format,-The%20two%20most",
        "https://www.youtube.com/watch?v=8afbTaA-gOQ",
        "https://www.geeksforgeeks.org/data-types-in-java/#:~:text=6.%20float%20Data,errors%20in%20java."
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week11-video-slides.pdf",
          "page": "19-52"
        }
      ] },
    { 
      "topic": "Overflow/Underflow", 
      "external": [
        "https://www.geeksforgeeks.org/floating-point-representation-basics/#:~:text=Overflow%20and%20Underflow",
        "https://www.geeksforgeeks.org/ieee-standard-754-floating-point-numbers/#:~:text=There%20are%20five,approximated%20by%20zero.",
        "https://introcs.cs.princeton.edu/java/91float/#:~:text=to%206%20digits.-,Roundoff%20error.,-Programming%20with%20floating",
        "https://eng.libretexts.org/Bookshelves/Computer_Science/Programming_and_Computation_Fundamentals/High_Performance_Computing_(Severance)/02%3A_Modern_Computer_Architectures/2.02%3A_Floating-Point_Numbers#:~:text=Exceptions%20and%20Traps",
        "https://www.geeksforgeeks.org/data-types-in-java/#:~:text=It%20is%20recommended%20to%20go%20through%20rounding%20off%20errors%20in%20java.",
        "https://www.tpointtech.com/type-casting-in-java#:~:text=int%20type%3A%20166-,Potential%20Data%20Loss,-One%20of%20the"
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week11-video-slides.pdf",
          "page": "34-35"
        }
      ] }
  ],
  "Week 9": [
    { 
      "topic": "Threading", 
      "external": [
        "https://youtu.be/xk4_1vDrzzo?t=40116",
        "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html",
        "https://www.geeksforgeeks.org/synchronization-in-java/#:~:text=Without%20Synchronization%2C%20data%20inconsistency%20or%20corruption%20can%20occur%20when%20multiple%20threads%20try%20to%20access%20and%20modify%20shared%20variables%20simultaneously.",
        "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html",
        "https://www.geeksforgeeks.org/java-threads/",
        "https://www.baeldung.com/java-producer-consumer-problem#:~:text=Java%20Example%20Using%20Threads",
        "https://medium.com/@nirajranasinghe/design-patterns-for-concurrent-programming-producer-consumer-pattern-39193cac195a"
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week9-video-slides.pdf",
          "page": "9-21"
        }
      ] },
    { 
      "topic": "Synchronization", 
      "external": [
        "https://www.geeksforgeeks.org/synchronization-in-java/",
        "https://www.baeldung.com/java-producer-consumer-problem#:~:text=In%20Java%2C%20the%20synchronized%20block%20uses%20an%20object%20to%20achieve%20thread%20synchronization.%20Each%20object%20has%20an%20intrinsic%20lock.%20Only%20the%20thread%20that%20acquires%20the%20lock%20first%20is%20allowed%20to%20execute%20the%20synchronized%20block."
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week9-video-slides.pdf",
          "page": "14-21"
        }
      ] },
    { 
      "topic": "Concurrency Pattern: Producer/Consumer Pattern", 
      "external": [
        "https://java-design-patterns.com/patterns/producer-consumer/#:~:text=Observer%3A%20While%20both%20deal%20with%20notifying%20or%20handling%20events%2C%20the%20Observer%20pattern%20is%20more%20about%20event%20subscription%20and%20notification%2C%20whereas%20Producer%2DConsumer%20focuses%20on%20decoupled%20data%20production%20and%20consumption.",
        "https://www.baeldung.com/java-producer-consumer-problem",
        "https://medium.com/@nirajranasinghe/design-patterns-for-concurrent-programming-producer-consumer-pattern-39193cac195a"
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week9-video-slides.pdf",
          "page": "22-24"
        }, 
        {
          "path": "resources/video_slides/week5-video-slides.pdf",
          "page": "8"
        }
      ] }
  ],
  "Week 8": [
    { 
      "topic": "Model-View-Controller Design", 
      "external": [
        "https://www.geeksforgeeks.org/mvc-design-pattern/",
        "https://www.geeksforgeeks.org/mvc-architecture-system-design/",
        "https://www.geeksforgeeks.org/mvc-framework-introduction/",
        "https://www.youtube.com/watch?v=DUg2SWWK18I"
      ], 
      "internal": [
        {
          "path": "resources/video_slides/week8-video-slides.pdf",
          "page": "4-15"
        },
        {
          "path": "resources/video_slides/week5-video-slides.pdf",
          "page": "18,29-30"
        }
      ] }
  ]
}
